'''
python面向对象学习
    类有两种作用：属性引用和实例化

1. 创建类
    使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾
1.1 类的注意事项
    类的帮助信息可以通过ClassName.__doc__查看。
    class_suite 由类成员，方法，数据属性组成。
    类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self
    self 代表的是类的实例，代表当前对象的地址，而 self.__class__ 则指向类。
    self 不是 python 关键字，换成其他名称也是可以执行的

2. 创建对象
    实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式
    可以使用点号 . 来访问对象的属性

3. python对象销毁(垃圾回收)
    Python 使用了引用计数这一简单技术来跟踪和回收垃圾。一个内部跟踪变量，称为一个引用计数器。
    在 Python 内部记录着所有使用中的对象各有多少引用。
    当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是"立即"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。
    垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。
    Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。
    在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。

4. 类的继承
    4.1、如果在子类中需要父类的构造方法就需要显式的调用父类的构造方法，或者不重写父类的构造方法。
    4.2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数
    4.3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）

5. 单下划线、双下划线、头尾双下划线说明
    __foo__: 定义的是特殊方法，一般是系统定义名字 ，类似 __init__() 之类的。
    _foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *
    __foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。
'''